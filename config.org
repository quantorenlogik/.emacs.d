#+Title: Peronal config.org
#+Author: Kai Poblocki
#+Date: 2019

* Cleaning up the UI and enhance basic defaults
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '("Emacs") ; nice window title
        ring-bell-function 'ignore       ; minimize distraction
        default-directory "~/")

  ;; literally every YouTube tutorial starts with this
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; add some padding
  (add-hook 'window-configuration-change-hook
          (lambda ()
            (set-window-margins (car (get-buffer-window-list (current-buffer) nil t)) 2 2)))

  ;; remove default startup screen
  (setq inhibit-startup-message t)

  ;; enable word wrap
  (global-visual-line-mode t)

  ;; highlight selected line (not in terminal)
  (when window-system (global-hl-line-mode t))

  ;; prettify symbols
  (when window-system (global-prettify-symbols-mode t))

  ;; replace the active region just by typing text, just like modern editors
  (delete-selection-mode +1)

  ;; show column number in mode-line
  (column-number-mode +1)

  ;; better scrolling experience
  (setq scroll-margin 0
        scroll-conservatively 100
        scroll-preserve-screen-position t
        auto-window-vscroll nil)

  ;; increase line space for better readability
  (setq-default line-spacing 3)

  ;; shorten yes-or-no-dialog
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Always use spaces for indentation (default to 4 spaces).
  (setq-default indent-tabs-mode nil
                tab-width 4)

  ;; show lines and columns on the modeline
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** Disable auto-save and backup files
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil) ;; stop creating those backup~ files
(setq auto-save-default nil) ;; stop creating those #autosave# files
#+END_SRC

** subword
For camelcase
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC

** electric pairs
Automatically generate corresponding brackets
#+BEGIN_SRC emacs-lisp
(setq electric-pair-pairs '(
                            (?\( . ?\))
                            (?\[ . ?\])
                            (?\{ . ?\})
                            ))
(electric-pair-mode t)
#+END_SRC

* convinient functions
** kill-whole-word
#+BEGIN_SRC emacs-lisp
(defun kill-whole-word ()
  (interactive)
  (backward-word)
  (kill-word 1))
(global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC

** copy-whole-line (like vim)
#+BEGIN_SRC emacs-lisp
(defun copy-whole-line ()
  (interactive)
  (save-excursion
        (kill-new
         (buffer-substring
          (point-at-bol)
          (point-at-eol)))))
(global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC

* config.org edit/reload keybindings
** edit config.org
#+BEGIN_SRC emacs-lisp
(defun config-open ()
  (interactive)
  (find-file "~/.emacs.d/config.org"))
(global-set-key (kbd "C-c e") 'config-open)
#+END_SRC
** reload config.org
#+BEGIN_SRC emacs-lisp
(defun config-reload ()
  (interactive)
  (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
(global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* Indentation and syntax for code blocks in org-mode
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
    org-src-window-setup 'current-window
    org-src-strip-leading-and-trailing-blank-lines t
    org-src-preserve-indentation t
    org-src-tab-acts-natively t)
#+END_SRC

* Don't bother killing processes and don't let backup~ files scatter around
#+BEGIN_SRC emacs-lisp
(use-package files
  :ensure nil
  :config
  (setq confirm-kill-process nil))
#+END_SRC

* which-key
 #+BEGIN_SRC emacs-lisp
 (use-package which-key
  :ensure t
  :init
  (which-key-mode))
 #+END_SRC

* sudo edit
Edit file as root (Linux specific)
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :ensure t
  :bind ("s-e" . sudo-edit))
#+END_SRC

* Terminal: use bash for ansi-term
#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
(global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC

* Configure doom-themes
#+BEGIN_SRC emacs-lisp
(require 'doom-themes)

;; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled

;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
;; may have their own settings.
(load-theme 'doom-opera t)

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Enable custom neotree theme (all-the-icons must be installed!)
(doom-themes-neotree-config)
;; or for treemacs users
(doom-themes-treemacs-config)

;; Corrects (and improves) org-mode's native fontification.
(doom-themes-org-config)
#+END_SRC

* Automatically refresh the buffer for changes outside of Emacs
#+BEGIN_SRC emacs-lisp
;(use-package autorevert
;  :ensure nil
;  :hook (after-init . global-auto-revert-mode)
;  :config
;  (setq auto-revert-interval 2
;        auto-revert-check-vc-info t
;        auto-revert-verbose nil))
#+END_SRC

* Reasonable speed for mouse wheel (track-pad)
By default, the scrolling is way too fast to be precise and helpful, let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
(use-package mwheel
  :ensure nil
  :config (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
                mouse-wheel-progressive-speed nil))
#+END_SRC

* Show matching parentheses
Reduce the highlight delay (instantly).
#+BEGIN_SRC emacs-lisp
(use-package paren
  :ensure nil
  :config
  (setq show-paren-delay 0)
  (show-paren-mode))
#+END_SRC

* Clean up whitespace and unnecessary empty lines on save
#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :ensure nil
  :config (add-hook 'before-save-hook 'whitespace-cleanup))
#+END_SRC

* Dashboard config
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '((recents . 10)))
  (setq dashboard-banner-logo-title "Moin."))
#+END_SRC

* Org mode modifications
** org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** remapping some keys
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "M-C-n") 'org-end-of-item-list)
  (define-key org-mode-map (kbd "M-C-p") 'org-beginning-of-item-list)
  (define-key org-mode-map (kbd "M-C-u") 'outline-up-heading)
  (define-key org-mode-map (kbd "M-C-w") 'org-table-copy-region)
  (define-key org-mode-map (kbd "M-C-y") 'org-table-paste-rectangle)
#+END_SRC

** snippet for elisp code insertion
"<el" for emacs-lisp code block in org mode
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
(add-to-list 'org-structure-template-alist
             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

** Essential workflow config for project management
   https://www.suenkler.info/docs/emacs-orgmode/
   https://www.suenkler.info/notes/emacs-config/

*** Basic setup for agenda-files
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (quote
   ("~/Nextcloud/org/tasks.org"
    "~/Nextcloud/org/notes/")))
#+END_SRC

*** org-download
    Drag and drop images to Emacs org-mode
#+BEGIN_SRC emacs-lisp
(use-package org-download
  :ensure t)
#+END_SRC

*** Workflow states
#+BEGIN_SRC emacs-lisp
;; "!" = timestamp
;; "@" = note
(setq org-todo-keywords
 '((sequence "TODO(t)" "IN-PROG(s!)" "WAITING(w@/!)" "APPT(a)" "PROJ(p)" "NOTIZ(n)" "BESPROCHEN(b)"
             "DELEGATED(g@/!)" "|" "DONE(d!)" "ZKTO(z)" "CANCELED(c@)")))

;; Fast TODO Selection
(setq org-use-fast-todo-selection t)
#+END_SRC

*** Logging
Automatically add timestamp for completing tasks
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)

;; use seperate drawer
(setq org-log-into-drawer t)
#+END_SRC

*** Visual improvements
#+BEGIN_SRC emacs-lisp
;(setq org-tags-column 0)
#+END_SRC

*** Capture
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("t" "Aufgabe in tasks.org" entry (file+headline "~/Nextcloud/org/tasks.org" "Inbox")
         "* TODO %?")
        ("w" "Waiting For Reply (Mail)" entry (file+headline "~/Nextcloud/org/tasks.org" "Inbox")
         "* WAITING Antwort auf %a")
        ("m" "Aufgabe aus Mail" entry (file+headline "~/Nextcloud/org/tasks.org" "Inbox")
         "* TODO %? , Link: %a")
        ("z" "Zeiteintrag in tasks.org" entry (file+headline "~/Nextcloud/org/tasks.org" "Inbox")
         "* ZKTO %? \n  %i" :clock-in t :clock-resume t)
        ("c" "Contacts" entry (file "~/Nextcloud/org/contacts.org")
         "* %(org-contacts-template-name) \n :PROPERTIES: %(org-contacts-template-email) \n :BIRTHDAY: \n :END:")
        ("j" "Journal" entry (file+datetree "~/Nextcloud/org/journal.org")
         "* %?\nEntered on %U\n  %i")
        ("p" "password" entry (file "~/Nextcloud/org/passwords.gpg")
         "* %^{Title}\n  %^{PASSWORD}p %^{USERNAME}p")))
#+END_SRC

*** keybindings
#+BEGIN_SRC emacs-lisp
;; Tasks-Datei auf C-c g
(global-set-key (kbd "C-c g") '(lambda ()
                           (interactive)
                           (find-file "~/Nextcloud/org/tasks.org")))

;; Agenda
(global-set-key (kbd "C-c a") 'org-agenda)

;; Org Capture
(define-key global-map (kbd "C-c c") 'org-capture)
#+END_SRC

** Blog publishing config
#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)

(use-package ox-publish
  :init
  (setq my-blog-header-file "~/Nextcloud/org/blog/partials/header.html"
        my-blog-footer-file "~/Nextcloud/org/blog/partials/footer.html"
        org-html-validation-link nil)

  ;; Load partials on memory
  (defun my-blog-header (arg)
    (with-temp-buffer
      (insert-file-contents my-blog-header-file)
      (buffer-string)))

  (defun my-blog-footer (arg)
    (with-temp-buffer
      (insert-file-contents my-blog-footer-file)
      (buffer-string)))

  (defun filter-local-links (link backend info)
    "Filter that converts all the /index.html links to /"
    (if (org-export-derived-backend-p backend 'html)
        (replace-regexp-in-string "/index.html" "/" link)))

  :config
  (setq org-publish-project-alist
        '(;; Publish the posts
          ("blog-notes"
           :base-directory "~/Nextcloud/org/blog"
           :base-extension "org"
           :publishing-directory "~/Nextcloud/org/blog/public"
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4
           :section-numbers nil
           :html-head nil
           :html-head-include-default-style nil
           :html-head-include-scripts nil
           :html-preamble my-blog-header
           :html-postamble my-blog-footer
           )

          ;; For static files that should remain untouched
          ("blog-static"
           :base-directory "~/Nextcloud/org/blog"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|eot\\|svg\\|woff\\|woff2\\|ttf"
           :publishing-directory "~/Nextcloud/org/blog/public"
           :recursive t
           :publishing-function org-publish-attachment
           )

          ;; Combine the two previous components in a single one
          ("blog" :components ("blog-notes" "blog-static"))))

  (add-to-list 'org-export-filter-link-functions 'filter-local-links))
#+END_SRC
* Markdown config
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
* Ido mode
Selecting buffers/files with great efficiency. In my opinion, Ido is enough to replace Ivy and Helm. We install ido-vertical to get a better view of the available options (use C-n, C-p or arrow keys to navigate). Flex matching is a nice touch and we are lucky to have flx-ido for that purpose.
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
  :ensure t
  :hook ((after-init . ido-mode)
         (after-init . ido-vertical-mode))
  :config
  (setq ido-everywhere t
        ido-enable-flex-matching t
        ido-vertical-define-keys 'C-n-C-p-up-and-down))

(use-package flx-ido :config (flx-ido-mode)
  :ensure t)
#+END_SRC

* smex (autocompletion for M-x)
#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :init (smex-initialize)
  :bind
  ("M-x" . smex))
#+END_SRC

* Buffers
** kill correct buffer without confirmation
#+BEGIN_SRC emacs-lisp
(defun kill-curr-buffer ()
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC

** kill all buffers
#+BEGIN_SRC emacs-lisp
(defun kill-all-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list)))
(global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+END_SRC

** switch buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
** enable ibuffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
** export mode for ibuffer
#+BEGIN_SRC emacs-lisp
(setq ibuffer-expert t)
#+END_SRC

* avy
I use avy for quick navigation in any buffer.
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind
  ("M-s" . avy-goto-char))
#+END_SRC
* Switch between windows efficiently
#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :ensure t
  :config
  (setq switch-window-input-style 'minibuffer)
  (setq switch-window-increase 4)
  (setq switch-window-threshold 2)
  (setq switch-window-shortcut-style 'qwerty)
  (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "h" "j" "k" "l"))
  :bind
  ([remap other-window] . switch-window))
#+END_SRC
** window splitting function
#+BEGIN_SRC emacs-lisp
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
* auto completion
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :init
  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
* Mode Line
** powerline with basic config
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
  :init
  (setq powerline-default-separator (quote arrow)
        powerline-inactive1 '((t (:background "grey11" :foreground "#c5c8c6")))
        powerline-inactive2 '((t (:background "grey20" :foreground "#c5c8c6")))))

(require 'powerline)
(powerline-default-theme)
#+END_SRC
* dmenu
#+BEGIN_SRC emacs-lisp
(use-package dmenu
  :ensure t
  :bind
  ("s-SPC" . dmenu))
#+END_SRC
* Fix ^M for mixed line endings (DOS, UNIX)
#+BEGIN_SRC emacs-lisp
(defun remove-dos-eol ()
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))
#+END_SRC
