#+TITLE: Peronal config.org
#+AUTHOR: Kai Poblocki
#+DATE: 2020

* UI configuration
** quick fix for bspwm
#+BEGIN_SRC emacs-lisp
(setq frame-resize-pixelwise t)
#+END_SRC
** frame defaults
#+BEGIN_SRC emacs-lisp
(use-package frame
  :ensure nil
  :config
  (setq initial-frame-alist (quote ((fullscreen . maximized))))
  (set-frame-font "DejaVu Sans Mono-9" nil t))
#+END_SRC
** Dump custom-set-variables to a garbage file and don't load it
#+BEGIN_SRC emacs-lisp
(use-package cus-edit
  :ensure nil
  :config
  (setq custom-file "~/.emacs.d/to-be-dumped.el"))
#+END_SRC
** random UI config
#+BEGIN_SRC emacs-lisp
(setq frame-title-format '("Emacs") ; nice window title
      ring-bell-function 'ignore       ; minimize distraction
      visible-bell nil
      default-directory "~/")

;; set padding around all sides
;(set-frame-parameter nil 'internal-border-width 10)

;; UTF-8 as default
(set-language-environment "UTF-8")

;; literally every YouTube tutorial starts with this
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

;; remove default startup screen
(setq inhibit-startup-message t)

;; enable word wrap
(global-visual-line-mode t)

;; highlight selected line (not in terminal)
; (when window-system (global-hl-line-mode t))

;; prettify symbols
(when window-system (global-prettify-symbols-mode t))

;; replace the active region just by typing text, just like modern editors
(delete-selection-mode +1)

;; show column number in mode-line
(column-number-mode +1)

;; better scrolling experience
(setq scroll-margin 0
      scroll-conservatively 100
      scroll-preserve-screen-position t
      auto-window-vscroll nil)

;; increase line space for better readability
(setq-default line-spacing 3)

;; shorten yes-or-no-dialog
(defalias 'yes-or-no-p 'y-or-n-p)

;; Always use spaces for indentation (default to 4 spaces).
(setq-default indent-tabs-mode nil
              tab-width 4)

;; visual improvements for tags in org mode
(setq org-tags-column -80)

;; show lines and columns on the modeline
(line-number-mode 1)
(column-number-mode 1)

;; disable blinking cursor
(blink-cursor-mode -1)

;; The native border "consumes" a pixel of the fringe on righter-most splits,
;; `window-divider' does not. Available since Emacs 25.1.
(setq-default window-divider-default-places t
              window-divider-default-bottom-width 1
              window-divider-default-right-width 1)
(add-hook 'doom-init-ui-hook #'window-divider-mode)
#+END_SRC
** Disable auto-save and backup files
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil) ;; stop creating those backup~ files
(setq auto-save-default nil) ;; stop creating those #autosave# files
#+END_SRC
** Subword
For camelcase
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC
** Electric pairs
Automatically generate corresponding brackets
#+BEGIN_SRC emacs-lisp
(setq electric-pair-pairs '(
                            (?\( . ?\))
                            (?\[ . ?\])
                            (?\{ . ?\})
                            ))
(electric-pair-mode t)
#+END_SRC
** Show matching parentheses
Reduce the highlight delay (instantly).
#+BEGIN_SRC emacs-lisp
(use-package paren
  :ensure nil
  :config
  (setq show-paren-delay 0)
  (show-paren-mode))
#+END_SRC
* Functions for improved workflow
** window splitting function
#+BEGIN_SRC emacs-lisp
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** kill-whole-word
#+BEGIN_SRC emacs-lisp
(defun kill-whole-word ()
  (interactive)
  (backward-word)
  (kill-word 1))
(global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC
** copy-whole-line (like vim)
#+BEGIN_SRC emacs-lisp
(defun copy-whole-line ()
  (interactive)
  (save-excursion
        (kill-new
         (buffer-substring
          (point-at-bol)
          (point-at-eol)))))
(global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC
** Fix ^M for mixed line endings (DOS, UNIX)
#+BEGIN_SRC emacs-lisp
(defun remove-dos-eol ()
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))
#+END_SRC
** auto-revert
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
* Packages
** Extensible vi layer: =EVIL=
#+BEGIN_SRC emacs-lisp
;; load evil
(use-package evil
  :ensure t ;; install the evil package if not installed
  :init ;; tweak evil's configuration before loading it
  (setq evil-search-module 'evil-search)
  (setq evil-ex-complete-emacs-commands nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-shift-round nil)
  (setq evil-want-C-u-scroll t)
  :config ;; tweak evil after loading it
  (evil-mode)

  ;; example how to map a command in normal mode (called 'normal state' in evil)
  (define-key evil-normal-state-map (kbd ", w") 'evil-window-vsplit))

(use-package evil-commentary
  :after evil
  :config (evil-commentary-mode +1))
#+END_SRC
** UI
*** Display preview for key bindings: =which-key=
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+END_SRC
*** Theme: =doom-themes=
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-nord t)

  ;; Enable flashing mode-line on errors
  ; (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_SRC
*** Modeline: =doom-modeline=
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :defer 0.1
  :config (doom-modeline-mode))

(use-package fancy-battery
  :ensure t
  :after doom-modeline
  :hook (after-init . fancy-battery-mode))

(use-package solaire-mode
  :ensure t
  :custom (solaire-mode-remap-fringe t)
  :config
  (solaire-mode-swap-bg)
  (solaire-global-mode +1))
#+END_SRC
*** Autocompletion for commands: =smex=
#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :init (smex-initialize)
  :bind
  ("M-x" . smex))
#+END_SRC
*** Icons: =all-the-icons=
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC
*** Dashboard: =dashboard=
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-set-navigator t)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-items '(
                          (bookmarks . 5)
                          (agenda . 5)))
  (setq dashboard-banner-logo-title "Ex nihilo nihil fit.")
  ;; Set the banner
  (setq dashboard-startup-banner 'logo))
#+END_SRC
** Navigation
*** Jumping to text (char-based): =avy=
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind
  ("M-s" . avy-goto-char))
#+END_SRC
*** Mouse wheel configuration: =mwheel=
By default, the scrolling is way too fast to be precise and helpful, let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
(use-package mwheel
  :ensure nil
  :config
  (setq mouse-wheel-scroll-amount '(3 ((shift) . 3))
        mouse-wheel-progressive-speed nil))
#+END_SRC
*** Switch windows efficiently: =switch-window=
#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :ensure t
  :config
  (setq switch-window-input-style 'minibuffer)
  (setq switch-window-increase 4)
  (setq switch-window-threshold 2)
  (setq switch-window-shortcut-style 'qwerty)
  (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "h" "j" "k" "l"))
  :bind
  ([remap other-window] . switch-window))
#+END_SRC
*** Program launcher: =dmenu=
#+BEGIN_SRC emacs-lisp
(use-package dmenu
  :ensure t
  :bind
  ("s-SPC" . dmenu))
#+END_SRC
*** Multiple cursors: =multiple-cursors=
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :config

  ;; active region that spans multiple lines, add a cursor to each line
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

  ;; add multiple cursors not based on keywords
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+END_SRC
*** fuzzy file search: =fzf=
#+BEGIN_SRC emacs-lisp
(use-package fzf
  :defer t
  :ensure t)
#+END_SRC
** Buffers
*** Selecting buffers/files: =ido-vertical-mode=
Selecting buffers/files with great efficiency. In my opinion, Ido is enough to replace =Ivy= and =Helm=. We install ido-vertical to get a better view of the available options (use C-n, C-p or arrow keys to navigate). Flex matching is a nice touch and we are lucky to have flx-ido for that purpose.
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
  :ensure t
  :hook ((after-init . ido-mode)
         (after-init . ido-vertical-mode))
  :config
  (setq ido-everywhere t
        ido-enable-flex-matching t
        ido-vertical-define-keys 'C-n-C-p-up-and-down))

(use-package flx-ido :config (flx-ido-mode)
  :ensure t)
#+END_SRC
*** Editing as super user (GNU/Linux): =sudo-edit=
    Edit file as root (Linux specific)
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :ensure t
  :bind ("s-e" . sudo-edit))
#+END_SRC
*** Searching files: =deft=
#+BEGIN_SRC emacs-lisp
(use-package deft
  :ensure t
  :config
  (setq deft-extensions '("txt" "tex" "org"))
  (setq deft-directory "~/Sync/org")
  (setq deft-recursive t)
  (global-set-key [f8] 'deft))
#+END_SRC
*** Clean up whitespace: =whitespace=
#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :ensure nil
  :config
  (add-hook 'before-save-hook 'whitespace-cleanup))
#+END_SRC
** Major modes
*** Racket: =racket-mode=
#+BEGIN_SRC emacs-lisp
(use-package racket-mode
  :ensure t)
#+END_SRC
*** Python: =Elpy=
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :init
  (elpy-enable)
  :config
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "--pylab=osx --pdb --nosep --classic"
        python-shell-prompt-regexp ">>> "
        python-shell-prompt-output-regexp ""
        python-shell-completion-setup-code "from IPython.core.completerlib import module_completion"
        python-shell-completion-module-string-code "';'.join(module_completion('''%s'''))\n"
        python-shell-completion-string-code "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"))
#+END_SRC
*** Markdown: =markdown-mode=
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
*** Latex: =AUCTeX=
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :defer t
  :ensure t
  :config

  ;; enable reftex for citations
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
  (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
  (setq reftex-plug-into-auctex t)

  ;; Default RefTeX bibliography
  (setq reftex-default-bibliography '("~/Sync/Universität/Masterarbeit/latex/thesis_1/MA.bib"))

  ;; Smart Quotes being not so smart
  (setq TeX-close-quote "}"
        TeX-open-quote "\\enquote{"))

  ;; Set XeLaTeX as default TeX-engine
  (setq-default TeX-engine 'xetex)
  (setq TeX-view-program-selection '((output-pdf "Zathura")))
  ;(setq TeX-view-program-list '("zathura" "zathura %o"))
  ;(setq TeX-view-program-selection '(output-pdf "zathura"))


(use-package auctex-latexmk
  :defer t
  :ensure t
  :config
  (auctex-latexmk-setup))
#+END_SRC
*** JSON-Mode: =json-mode=
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :defer t
  :ensure t)
#+END_SRC
*** Calendar: =calfw=
#+BEGIN_SRC emacs-lisp
(use-package calfw
  :ensure t)
#+END_SRC
** Minor modes
*** Distraction-free writing mode 2: =olivetti=
#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :defer t
  :ensure t
  :config
  (setq olivetti-set-width 100)
  (eval-after-load "olivetti"
    '(progn (define-key olivetti-mode-map (kbd "C-c [") nil)
            (define-key olivetti-mode-map (kbd "C-c ]") nil))))
#+End_SRC
*** Browse bibliographical references: =biblio=
#+BEGIN_SRC emacs-lisp
(use-package biblio
  :defer t
  :ensure t)
#+END_SRC
** Emails: =mu4e=
#+BEGIN_SRC emacs-lisp
(use-package org-mime
  :defer t
  :ensure t)

(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e/")
(require 'mu4e)

; get mail
(setq mu4e-get-mail-command "mbsync -c ~/.emacs.d/mu4e/.mbsyncrc -a"
  ;; using the default mu4e-shr2text
  ;; mu4e-html2text-command "w3m -T text/html"
  mu4e-view-prefer-html t
  mu4e-update-interval 180
  mu4e-headers-auto-update t
  mu4e-compose-signature-auto-include nil
  mu4e-compose-format-flowed t)

;; to view selected message in the browser, no signin, just html mail
(add-to-list 'mu4e-view-actions
  '("ViewInBrowser" . mu4e-action-view-in-browser) t)

;; enable inline images
(setq mu4e-view-show-images t)
;; use imagemagick, if available
(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))

;; every new email composition gets its own frame!
(setq mu4e-compose-in-new-frame t)

;; don't save message to Sent Messages, IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

(add-hook 'mu4e-view-mode-hook #'visual-line-mode)

;; <tab> to navigate to links, <RET> to open them in browser
(add-hook 'mu4e-view-mode-hook
  (lambda()
;; try to emulate some of the eww key-bindings
(local-set-key (kbd "<RET>") 'mu4e~view-browse-url-from-binding)
(local-set-key (kbd "<tab>") 'shr-next-link)
(local-set-key (kbd "<backtab>") 'shr-previous-link)))

;; from https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/elgoumx
(add-hook 'mu4e-headers-mode-hook
      (defun my/mu4e-change-headers ()
    (interactive)
    (setq mu4e-headers-fields
          `((:human-date . 25) ;; alternatively, use :date
        (:flags . 6)
        (:from . 22)
        (:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject
        (:size . 7)))))

;; if you use date instead of human-date in the above, use this setting
;; give me ISO(ish) format date-time stamps in the header list
;(setq mu4e-headers-date-format "%Y-%m-%d %H:%M")

;; spell check
(add-hook 'mu4e-compose-mode-hook
    (defun my-do-compose-stuff ()
       "My settings for message composition."
       (visual-line-mode)
       (org-mu4e-compose-org-mode)
           (use-hard-newlines -1)
       (flyspell-mode)))

(require 'smtpmail)

;;rename files when moving
;;NEEDED FOR MBSYNC
(setq mu4e-change-filenames-when-moving t)

;;set up queue for offline email
;;use mu mkdir ~/Maildir/acc/queue to set up first
(setq smtpmail-queue-mail nil)  ;; start in normal mode

;;from the info manual
(setq mu4e-attachment-dir  "~/Downloads")

(setq message-kill-buffer-on-exit t)
(setq mu4e-compose-dont-reply-to-self t)

(require 'org-mu4e)

;; convert org mode to HTML automatically
(setq org-mu4e-convert-to-html t)

;;from vxlabs config
;; show full addresses in view message (instead of just names)
;; toggle per name with M-RET
(setq mu4e-view-show-addresses 't)

;; don't ask when quitting
(setq mu4e-confirm-quit nil)

;; mu4e-context
(setq mu4e-context-policy 'pick-first)
(setq mu4e-compose-context-policy 'always-ask)
(setq mu4e-contexts
  (list
   (make-mu4e-context
    :name "gmail" ;;for poblocki.kai-gmail
    :enter-func (lambda () (mu4e-message "Entering context work"))
    :leave-func (lambda () (mu4e-message "Leaving context work"))
    :match-func (lambda (msg)
          (when msg
        (mu4e-message-contact-field-matches
         msg '(:from :to :cc :bcc) "poblocki.kai@gmail.com")))
    :vars '((user-mail-address . "poblocki.kai@gmail.com")
        (user-full-name . "Kai Poblocki")
        (mu4e-sent-folder . "/poblocki.kai-gmail/[poblocki.kai].Gesendet")
        (mu4e-drafts-folder . "/poblocki.kai-gmail/[poblocki.kai].drafts")
        (mu4e-trash-folder . "/poblocki.kai-gmail/[poblocki.kai].Papierkorb")
        (mu4e-compose-signature . (concat "Formal Signature\n" "Emacs 25, org-mode 9, mu4e 1.0\n"))
        (mu4e-compose-format-flowed . t)
        (smtpmail-queue-dir . "~/Maildir/poblocki.kai-gmail/queue/cur")
        (message-send-mail-function . smtpmail-send-it)
        (smtpmail-smtp-user . "poblocki.kai")
        (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
        (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
        (smtpmail-default-smtp-server . "smtp.gmail.com")
        (smtpmail-smtp-server . "smtp.gmail.com")
        (smtpmail-smtp-service . 587)
        (smtpmail-debug-info . t)
        (smtpmail-debug-verbose . t)
                    ))
   (make-mu4e-context
    :name "posteo" ;;for poblocki-posteo
    :enter-func (lambda () (mu4e-message "Entering context work"))
    :leave-func (lambda () (mu4e-message "Leaving context work"))
    :match-func (lambda (msg)
          (when msg
        (mu4e-message-contact-field-matches
         msg '(:from :to :cc :bcc) "poblocki@posteo.de")))
    :vars '((user-mail-address . "poblocki@posteo.de")
        (user-full-name . "Kai Poblocki")
        (mu4e-sent-folder . "/poblocki-posteo/[poblocki].Sent")
        (mu4e-drafts-folder . "/poblocki-posteo/[poblocki].Drafts")
        (mu4e-trash-folder . "/poblocki-posteo/[poblocki].Trash")
        (mu4e-compose-signature . (concat "Formal Signature\n" "Emacs 25, org-mode 9, mu4e 1.0\n"))
        (mu4e-compose-format-flowed . t)
        (smtpmail-queue-dir . "~/Maildir/poblocki-posteo/queue/cur")
        (message-send-mail-function . smtpmail-send-it)
        (smtpmail-smtp-user . "poblocki@posteo.de")
        (smtpmail-starttls-credentials . (("posteo.de" 993 nil nil)))
        (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
        (smtpmail-default-smtp-server . "posteo.de")
        (smtpmail-smtp-server . "posteo.de")
        (smtpmail-smtp-service . 587)
        (smtpmail-debug-info . t)
        (smtpmail-debug-verbose . t)
        ))))
#+END_SRC
** Exports
*** Export org to html: =htmlize=
#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :defer t
  :ensure t)
#+END_SRC
* Org mode config
** UI
*** org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
*** Resize images
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width nil)
#+END_SRC
** Encrypting text of an entry
#+BEGIN_SRC emacs-lisp
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.
(setq org-crypt-key nil)
#+END_SRC
** org-journal
#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :ensure t
  :defer t
  :custom
  (org-journal-file-type 'yearly)
  (org-journal-dir "~/Sync/org/journal/")
  (org-journal-date-format "%A, %d %B %Y"))
#+END_SRC
** snippets code insertion
shortcuts for code blocks in org mode
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
(add-to-list 'org-structure-template-alist
             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
(add-to-list 'org-structure-template-alist
             '("py" "#+BEGIN_SRC python :results output\n?\n#+END_SRC"))
(setq org-confirm-babel-evaluate nil)
#+END_SRC
** Workflow config for project management
https://www.suenkler.info/docs/emacs-orgmode/
https://www.suenkler.info/notes/emacs-config/
*** Basic setup for agenda-files
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (quote
   ("~/Sync/org/tasks.org"
    "~/Sync/org/notes/")))
#+END_SRC
*** org-download
Drag and drop images to Emacs org-mode
#+BEGIN_SRC emacs-lisp
(use-package org-download
  :ensure t)
#+END_SRC
*** Workflow states
#+BEGIN_SRC emacs-lisp
;; "!" = timestamp
;; "@" = note
(setq org-todo-keywords
 '((sequence "TODO(t)" "IN-PROG(s!)" "WAITING(w@/!)" "APPT(a)" "PROJ(p)" "NOTIZ(n)" "BESPROCHEN(b)"
             "DELEGATED(g@/!)" "|" "DONE(d!)" "ZKTO(z)" "CANCELED(c@)")))

;; Fast TODO Selection
(setq org-use-fast-todo-selection t)
#+END_SRC
*** Logging
Automatically add timestamp for completing tasks
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)

;; use seperate drawer
(setq org-log-into-drawer t)
#+END_SRC
*** Capture
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("t" "Aufgabe in tasks.org" entry (file+headline "~/Sync/org/tasks.org" "Inbox")
         "* TODO %?")
        ("w" "Waiting For Reply (Mail)" entry (file+headline "~/Sync/org/tasks.org" "Inbox")
         "* WAITING Antwort auf %a")
        ("m" "Aufgabe aus Mail" entry (file+headline "~/Sync/org/tasks.org" "Inbox")
         "* TODO %? , Link: %a")
        ("z" "Zeiteintrag in tasks.org" entry (file+headline "~/Sync/org/tasks.org" "Inbox")
         "* ZKTO %? \n  %i" :clock-in t :clock-resume t)
        ("c" "Contacts" entry (file "~/Sync/org/contacts.org")
         "* %(org-contacts-template-name) \n :PROPERTIES: %(org-contacts-template-email) \n :BIRTHDAY: \n :END:")
        ("j" "Journal" entry (file+datetree "~/Sync/org/journal.org")
         "* %?\nEntered on %U\n  %i")
        ("p" "password" entry (file "~/Sync/org/passwords.gpg")
         "* %^{Title}\n  %^{PASSWORD}p %^{USERNAME}p")
        ("b" "Bookmark" entry (file+headline "~/Sync/org/notes/bookmarks.org" "Bookmarks")
       "* %?\n:PROPERTIES:\n:CREATED: %U\n:NOTES:%^{Notes}\n:END:\n\n" :empty-lines 1)))
#+END_SRC
*** keybindings
#+BEGIN_SRC emacs-lisp
;; Tasks-Datei auf C-c g
(global-set-key (kbd "C-c g") '(lambda ()
                           (interactive)
                           (find-file "~/Sync/org/tasks.org")))

(global-set-key (kbd "C-c b") '(lambda ()
                           (interactive)
                           (find-file "~/Sync/org/notes/bookmarks.org")))

;; Agenda
(global-set-key (kbd "C-c a") 'org-agenda)

;; Org Capture
(define-key global-map (kbd "C-c c") 'org-capture)
#+END_SRC
** Indentation and syntax for code blocks in org-mode
#+BEGIN_SRC emacs-lisp
;; hide empty lines in collapsed tree
(setq org-cycle-separator-lines 0)

;; autoindent org files
(setq org-startup-indented t)

;; pretty latex symbols in org mode
(setq org-pretty-entities t)

;; optimizing settings
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation nil       org-edit-src-content-indentation 0
      org-src-tab-acts-natively t)
#+END_SRC
* Keybindings
** keybinds for common files
#+BEGIN_SRC emacs-lisp
;; config.org
(defun config-open ()
  (interactive)
  (find-file "~/.emacs.d/config.org"))
(global-set-key (kbd "C-c e") 'config-open)

;; qnotes.org
(defun qnotes-open ()
  (interactive)
  (find-file "~/Sync/org/qnotes.org"))
(global-set-key (kbd "C-c q") 'qnotes-open)
#+END_SRC
** reload config.org
#+BEGIN_SRC emacs-lisp
(defun config-reload ()
  (interactive)
  (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
(global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** fzf
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c f") 'fzf-directory)
#+END_SRC
* Buffer configuration
** kill correct buffer without confirmation
#+BEGIN_SRC emacs-lisp
(defun kill-curr-buffer ()
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC
** switch buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
** enable ibuffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
** export mode for ibuffer
#+BEGIN_SRC emacs-lisp
(setq ibuffer-expert t)
#+END_SRC
* Terminal: use bash for ansi-term
#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
(global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC
* Fix ^M
#+BEGIN_SRC emacs-lisp
(defun remove-dos-eol ()
  "Do not show ^M in files containing mixed UNIX and DOS line endings."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))
#+END_SRC
